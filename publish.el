;; Copyright (C) 2022  Matthias Paulmier

;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;; Variables declaration

;; The number of entries in each page generated by the sitemap
(require 'org)
(require 'ox)
(require 'ox-org)
(require 'ox-publish)

(setq number-of-headings-per-index-page 5)

(setq project-path
      (file-name-directory
       (or (buffer-file-name) load-file-name)))

(setq org-publish-project-alist
      `(("org"
         :base-extension "org"
         :base-directory ,(concat project-path "org")
         :publishing-function custom-org-html-publish-to-html
         :publishing-directory ,(concat project-path "html")
         :auto-sitemap t
         :with-toc nil
         :sitemap-function custom-sitemap)
        ("sitemap"
         :exclude ".*.org"
         :include ("sitemap.org")
         :base-directory ,(concat project-path "org")
         :publishing-directory ,(concat project-path "html")
         :publishing-function custom-org-sitemap-publish-to-org
         :completion-function post-process-indexes)
        ("indexes"
         :base-extension "index"
         :base-directory ,(concat project-path "org")
         :publishing-directory ,(concat project-path "html")
         :with-toc nil
         :publishing-function org-html-publish-to-html)))

(defun custom-sitemap (title list)
  "Generate a single sitemap file that will be easy to cut up into
multiple files.

The idea is to print each entry as a single subheading. Each to
level heading will represent the index page. Their will be as
many subheadings per top level heading as declared in
`number-of-headings-per-index-page'.

Under each top level heading, we add an empty custom block named
\"links\". This will be used later to add the previous and next
links on the generated pages.

LIST is a sequence of the following form: '(unordered (\"Entry
1\") (\"Entry 2\")...)"

  ;; First partition the entries in the list into lists of 5 elements
  (let* ((lst (cdr list))
         (parts (cl-loop with size = number-of-headings-per-index-page
                         and tail = lst
                         while tail
                         for page upfrom 1
                         collect
                         (cons
                          page
                          (cl-loop for part on tail
                                   for i upfrom 1 to size
                                   collect (car part)
                                   finally (setf tail part))))))
    ;; Each part will be a heading and each entry in the list will be a
    ;; sub-heading
    (mapconcat
     #'(lambda (x)
         (format "* Page %d\n#+begin_links\n\n#+end_links\n%s"
                 (car x)
                 (mapconcat #'(lambda (s) (format "** %s" s)) (mapcar #'car (cdr x)) "\n\n")))
     parts
     "\n")))

(defun custom-org-html-publish-to-html (plist filename pub-dir)
  "Avoid publishing sitemap to html, we handle this file in another
way."
  (when (not (string-match ".*sitemap.org" filename))
    (org-html-publish-to-html plist filename pub-dir)))

(defun custom-org-sitemap-publish-to-org (plist filename pub-dir)
  "A custom publish exporter that doesn't use `org-publish-org-to'

FILENAME is the filename of the Org file to be published.  PLIST
is the property list for the given project.  PUB-DIR is the
publishing directory.

This function will create as many org index files as their are
top level headlines in the Org file."
  (let ((org-inhibit-startup t)
        ;; Publish to the base directory as org file
        (dir (plist-get plist :base-directory)))
    (unwind-protect
        (with-temp-buffer
          (org-mode)
          (insert-file-contents filename)
          (beginning-of-buffer)
          (when (not (org-at-heading-p)) (org-next-visible-heading nil))
          (cl-loop for beg-point = (point)
                   for i upfrom 1
                   do
                   (let ((el (org-element-at-point))
                         (output (concat dir (if (eq i 1) "/index.index" (format "/index_%d.index" i)))))
                     (org-export-to-file 'org output nil t nil nil plist nil)
                     (org-forward-heading-same-level 1))
                   while (not (eq (point) beg-point)))))))

(defun post-process-indexes (plist)
  "In this function, we add the links to the previous and next
indexes."
  (let* ((org-inhibit-startup t)
         (dir (concat (plist-get plist :base-directory) "/"))
         (indexes (directory-files dir nil ".*\.index$" nil nil))
         (icount (length indexes)))
    (when (> icount 1)
      (cl-loop for i from 1 to icount
               for filename = (concat dir (if (eq i 1) "index.index" (format "index_%d.index" i)))
               for next = (if (eq i icount)
                                nil
                              (concat dir (format "index_%d.html" (1+ i))))
               with prev = nil
               do
               (with-temp-buffer
                 (insert-file-contents filename)
                 ;; In this function, we assume the file is outputed by
                 ;; `custom-org-sitemap-publish-to-org' or a function with
                 ;; similar output format
                 (search-forward "#+begin_links")
                 (next-line)
                 (when prev
                   (insert (format "[[%s][Prev]]" prev))
                   (newline))
                 (when next
                   (insert (format "[[%s][Next]]" next)))
                 (write-file filename)
                 (setf prev (concat dir (concat (file-name-base filename) ".html"))))))))
